# Copyright (C) 2020 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <https://www.gnu.org/licenses/>.

---

- import_playbook: ceph-fsid.yml

- hosts: mon-000
  become: yes
  tasks:
  - name: allow pool deletion
    shell: ceph config set mon mon_allow_pool_delete true

  - name: allow distributed ephemeral pins
    shell: ceph config set mds mds_export_ephemeral_distributed true

  - name: allow random ephemeral pins
    shell: ceph config set mds mds_export_ephemeral_random true

- hosts: all
  become: yes
  tasks:
  - name: cp ceph-gather.py
    copy: src=../misc/ceph-gather.py dest=/ owner=root group=root mode=0755

  - name: cp ceph-gather.service
    copy: src=../misc/ceph-gather.service dest=/etc/systemd/system/ owner=root group=root mode=0644

# Make sure /perf is unmounted if it exists otherwise the check that creates /mnt will hang.
- import_playbook: kernel-umount.yml
- import_playbook: cephfs-destroy.yml

- hosts: clients
  become: yes
  tasks:
  # Use mode=0000/attributes=i to prevent tests blindly running on local file system.
  - name: set mnt dir
    file:
      attributes: i
      path: /perf/
      state: directory
      owner: root
      group: root
      mode: 0000

  - name: install dependencies
    apt:
      name: build-essential,git,autoconf,automake,bc,gdb,htop,jq,attr,wget
      state: present

  - name: clone smallfile
    git:
      repo: https://github.com/bengland2/smallfile
      dest: /root/smallfile
      update: no

  - name: check for ssh key
    find:
      paths: /root/.ssh/
      patterns: "id_rsa.pub"
    register: find_ssh
    delegate_to: client-000
    run_once: true

  - name: create ssh key
    shell: ssh-keygen -b 4096 -t rsa -f /root/.ssh/id_rsa -q -N ""
    when: find_ssh.matched == 0
    delegate_to: client-000
    run_once: true

  - name: get public key
    shell: cat /root/.ssh/id_rsa.pub
    register: client000pub
    delegate_to: client-000
    run_once: true

  - name: register client-000 public key with other clients
    lineinfile:
      path: /root/.ssh/authorized_keys
      line: "{{ client000pub.stdout }}"
